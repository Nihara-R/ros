# Minimal Nav2 parameters for TurtleBot3 Burger
amcl:
  ros__parameters:
    use_map_topic: true
    # Add other AMCL parameters if needed

bt_navigator:
  ros__parameters:
    plugin_lib_names:
    - nav2_compute_path_to_pose_action_bt_node
    - nav2_follow_path_action_bt_node
    - nav2_spin_action_bt_node
    - nav2_wait_action_bt_node
    - nav2_clear_costmap_service_bt_node
    - nav2_is_stuck_condition_bt_node
    - nav2_goal_reached_condition_bt_node
    - nav2_goal_updated_condition_bt_node
    - nav2_initial_pose_received_condition_bt_node
    - nav2_reinitialize_global_localization_service_bt_node
    - nav2_rate_controller_bt_node
    - nav2_distance_controller_bt_node
    - nav2_speed_controller_bt_node
    - nav2_truncate_path_action_bt_node
    - nav2_goal_updater_node_bt_node
    - nav2_recovery_node_bt_node
    - nav2_pipeline_sequence_bt_node
    - nav2_round_robin_node_bt_node
    - navi2_navigate_through_poses_action_bt_node
    - nav2_navigate_to_pose_action_bt_node
    - nav2_remove_passed_goals_action_bt_node

controller_server:
  ros__parameters:
    controller_plugins: ["FollowPath"]
    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"
      # Add DWB parameters here if needed

planner_server:
  ros__parameters:
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_navfn_planner/NavfnPlanner"
      # For Dijkstra/A* 
      # You can also use "nav2_smac_planner/SmacPlanner2D"

global_costmap:
  global_costmap:
    ros__parameters:
      robot_base_frame: "base_footprint"
      global_frame: "map"
      plugin_names: ["static_layer", "obstacle_layer", "inflation_layer"]
      plugin_types: ["nav2_costmap_2d::StaticLayer", "nav2_costmap_2d::ObstacleLayer", "nav2_costmap_2d::InflationLayer"]
      static_layer:
        map_subscribe_transient_local: True
      obstacle_layer:
        observation_sources: scan
        scan:
          topic: /scan
          sensor_frame: base_scan
          observation_persistence: 0.0
          max_obstacle_height: 2.0
          min_obstacle_height: 0.0
          data_type: "LaserScan"
          clearing: true
          marking: true

local_costmap:
  local_costmap:
    ros__parameters:
      robot_base_frame: "base_footprint"
      global_frame: "odom"
      width: 3
      height: 3
      resolution: 0.05
      plugin_names: ["obstacle_layer", "inflation_layer"]
      plugin_types: ["nav2_costmap_2d::ObstacleLayer", "nav2_costmap_2d::InflationLayer"]
      obstacle_layer:
        observation_sources: scan
        scan:
          topic: /scan
          sensor_frame: base_scan
          observation_persistence: 0.0
          max_obstacle_height: 2.0
          min_obstacle_height: 0.0
          data_type: "LaserScan"
          clearing: true
          marking: true

behavior_server:
  ros__parameters:
    behavior_plugins: ["spin", "wait", "backup"]
    spin:
      plugin: "nav2_behaviors/Spin"
    wait:
      plugin: "nav2_behaviors/Wait"
    backup:
      plugin: "nav2_behaviors/BackUp"

# Other required parameters
CostmapFilterInfoServer:
  ros__parameters:
    use_sim_time: True
WaypointFollower:
  ros__parameters:
    use_sim_time: True
VelocitySmoother:
  ros__parameters:
    use_sim_time: True